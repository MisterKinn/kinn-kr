"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/converter/page",{

/***/ "(app-pages-browser)/./src/app/converter/converter.js":
/*!****************************************!*\
  !*** ./src/app/converter/converter.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateExchangeRate: function() { return /* binding */ calculateExchangeRate; },\n/* harmony export */   convertCurrency: function() { return /* binding */ convertCurrency; },\n/* harmony export */   displayErrorMessage: function() { return /* binding */ displayErrorMessage; },\n/* harmony export */   exchangeRates: function() { return /* binding */ exchangeRates; },\n/* harmony export */   getUserCountry: function() { return /* binding */ getUserCountry; },\n/* harmony export */   lastUpdateTime: function() { return /* binding */ lastUpdateTime; },\n/* harmony export */   mapCountryCode: function() { return /* binding */ mapCountryCode; },\n/* harmony export */   updateExchangeRates: function() { return /* binding */ updateExchangeRates; }\n/* harmony export */ });\nlet exchangeRates = {};\nlet lastUpdateTime = null;\nfunction displayErrorMessage(message) {\n    console.error(message);\n    alert(message);\n}\nfunction displayLastUpdateTime() {\n    const updateElement = document.querySelector(\"#lastUpdateTime\");\n    if (lastUpdateTime) {\n        const formattedTime = new Date(lastUpdateTime).toLocaleString();\n        updateElement.textContent = \"Last Updated: \".concat(formattedTime);\n    } else {\n        updateElement.textContent = \"Data has not been updated yet.\";\n    }\n}\nasync function updateExchangeRates() {\n    try {\n        const response = await fetch(\"https://api.exchangerate-api.com/v4/latest/USD\" // Fetch Exchange Rates\n        );\n        const data = await response.json();\n        if (data.rates) {\n            // Filter desired currencies from the API response\n            const desiredCurrencies = [\n                \"USD\",\n                \"KRW\",\n                \"AUD\",\n                \"BRL\",\n                \"CAD\",\n                \"CNY\",\n                \"EUR\",\n                \"GBP\",\n                \"JPY\",\n                \"MXN\",\n                \"PHP\"\n            ];\n            const filteredRates = Object.fromEntries(Object.entries(data.rates).filter((param)=>{\n                let [currency] = param;\n                return desiredCurrencies.includes(currency);\n            }));\n            exchangeRates = filteredRates;\n            lastUpdateTime = Date.now();\n            console.log(\"Exchange Rates Updated:\", exchangeRates);\n            displayLastUpdateTime();\n        } else {\n            console.error(\"Failed to update Exchange Rates:\", data);\n        }\n    } catch (error) {\n        console.error(\"Error updating Exchange Rates:\", error);\n    }\n}\nfunction mapCountryCode(apiCountryCode) {\n    const codeMapping = {\n        US: \"usd\",\n        KR: \"krw\",\n        AU: \"aud\",\n        BR: \"brl\",\n        CA: \"cad\",\n        CN: \"cny\",\n        EU: \"eur\",\n        GB: \"gbp\",\n        JP: \"jpy\",\n        MX: \"mxn\",\n        PH: \"php\"\n    };\n    return codeMapping[apiCountryCode] || apiCountryCode;\n}\nasync function getUserCountry() {\n    try {\n        const response = await fetch(\"https://ipapi.co/json/\");\n        const data = await response.json();\n        if (data.country) {\n            return mapCountryCode(document.querySelector(\"#fromCurrency\").value);\n        } else {\n            console.error(\"Failed to get user country:\", data);\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error getting user country:\", error);\n        return null;\n    }\n}\nasync function initialize() {\n    const defaultCurrency = \"\";\n    if (defaultCurrency) {\n        const fromCurrencyElement = document.querySelector(\"#fromCurrency\");\n        const toCurrencyElement = document.querySelector(\"#toCurrency\");\n        fromCurrencyElement.value = defaultCurrency;\n        toCurrencyElement.value = \"usd\";\n        await updateExchangeRates();\n        displayLastUpdateTime();\n        setInterval(updateExchangeRates, 3600000); // Update Exchange Rates every 1 hr\n    } else {\n        console.error(\"Failed to get user country code. Please set default currency manually.\");\n    }\n}\nif (true) {\n    window.addEventListener(\"load\", initialize);\n}\nfunction calculateExchangeRate(fromCurrency, toCurrency) {\n    if (exchangeRates && exchangeRates[fromCurrency] && exchangeRates[toCurrency]) {\n        return exchangeRates[toCurrency] / exchangeRates[fromCurrency];\n    }\n    return null;\n}\nasync function convertCurrency(fromCurrency, toCurrency, amount) {\n    const fromCurrencyElement = document.querySelector(\"#fromCurrency\");\n    const toCurrencyElement = document.querySelector(\"#toCurrency\");\n    const amountElement = document.querySelector(\"#amount\");\n    if (!fromCurrencyElement || !toCurrencyElement || !amountElement) {\n        console.error(\"Required elements not found. Please check your HTML structure.\");\n        return;\n    }\n    fromCurrency = String(fromCurrency).toUpperCase();\n    toCurrency = String(toCurrency).toUpperCase();\n    amount = parseFloat(amount);\n    if (!amount) {\n        // No amount\n        return;\n    }\n    try {\n        if (Object.keys(exchangeRates).length === 0) {\n            await updateExchangeRates();\n        }\n        const exchangeRate = calculateExchangeRate(fromCurrency, toCurrency);\n        if (exchangeRate === null) {\n            return;\n        }\n        const result = (amount * exchangeRate).toFixed(2);\n        const formattedFromCurrency = new Intl.NumberFormat(\"en-US\", {\n            style: \"currency\",\n            currency: fromCurrency,\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n            currencyDisplay: \"symbol\"\n        }).format(amount.toFixed(2));\n        const formattedToCurrency = new Intl.NumberFormat(\"en-US\", {\n            style: \"currency\",\n            currency: toCurrency,\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n            currencyDisplay: \"symbol\"\n        }).format(result);\n        const resultElement = document.querySelector(\"#result\");\n        if (!resultElement) {\n            console.error(\"Result element not found. Please check your HTML structure.\");\n            return;\n        }\n        resultElement.innerHTML = \"\".concat(formattedFromCurrency, \" = \").concat(formattedToCurrency);\n        const lastUpdatedElement = document.querySelector(\"#lastUpdated\");\n        if (lastUpdatedElement) {\n            lastUpdatedElement.textContent = \"Last Updated: \".concat(new Date().toLocaleString());\n        }\n    } catch (error) {\n        console.error(\"Error converting currency:\", error);\n        displayErrorMessage(\"Error converting currency.\");\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/converter/converter.js\n"));

/***/ })

});